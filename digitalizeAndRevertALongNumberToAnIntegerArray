import java.util.Arrays;

public class Main {
    public static void main(String[] args) {

        String test1 = Arrays.toString(digitize(123456789));
        String test2 = Arrays.toString(digitizeGPT(123456789));

        if (test1.equals(test2))
            System.out.println("Bruh");
    }

    public static int[] digitize(long n) {
        // Code here
        //Convert number to reversed array of digits
        //Given a random non-negative number, you have to return the digits of this number within an array in reverse order.

        //Example(Input => Output):
        //35231 => [1,3,2,5,3]
        //0 => [0]
        char[] convertNumberInputToCharArray = Long.toString(n).toCharArray();
        int[] output = new int[convertNumberInputToCharArray.length];
        int index = 0;

        for (int i = convertNumberInputToCharArray.length - 1; i >= 0; i--) {
            output[index] = Character.getNumericValue(convertNumberInputToCharArray[i]);
            index++;
        }

        return output;
    }

    /**
     * This method takes a non-negative long number, n, as input and
     * returns the digits of the number as an array in reverse order.
     *
     * Example(Input => Output):
     * 35231 => [1,3,2,5,3]
     * 0 => [0]
     *
     * @param n A non-negative long number to be converted to a reversed array of digits.
     * @return An integer array of the digits of the input number in reverse order.
     */
    public static int[] digitizeGPT(long n) {
        // Reverse the string representation of the number
        String reversed = new StringBuilder(Long.toString(n)).reverse().toString();

        // Convert the reversed string to an array of digits
        int[] output = new int[reversed.length()];
        for (int i = 0; i < reversed.length(); i++) {
            output[i] = Character.getNumericValue(reversed.charAt(i));
        }

        return output;
    }

}
